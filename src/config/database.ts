// src/config/database.ts

import mongoose from 'mongoose'; // Importa a biblioteca Mongoose

// URL de conex√£o com o MongoDB.
// √â altamente recomend√°vel usar vari√°veis de ambiente para a URL do DB em produ√ß√£o.
// Para desenvolvimento local, voc√™ pode usar 'mongodb://localhost:27017/pretalab_db'.
// Certifique-se de que um servidor MongoDB esteja rodando.
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://santoslays67:OjjhskOnIFwe8KIv@lays.dqibjym.mongodb.net/?retryWrites=true&w=majority&appName=Lays';

/**
 * Conecta a aplica√ß√£o ao banco de dados MongoDB.
 * @returns {Promise<void>} Uma promessa que resolve quando a conex√£o √© bem-sucedida.
 */
export const connectDB = async (): Promise<void> => {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('üéâ Conex√£o com o MongoDB estabelecida com sucesso!');
  } catch (error: any) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error.message);
    process.exit(1); // Encerra o processo da aplica√ß√£o em caso de falha na conex√£o
  }
};

/**
 * Desconecta a aplica√ß√£o do banco de dados MongoDB.
 * √ötil para testes ou para desligamento gracioso do servidor.
 * @returns {Promise<void>} Uma promessa que resolve quando a desconex√£o √© bem-sucedida.
 */
export const disconnectDB = async (): Promise<void> => {
  try {
    await mongoose.disconnect();
    console.log('üëã Conex√£o com o MongoDB encerrada.');
  } catch (error: any) {
    console.error('‚ùå Erro ao desconectar do MongoDB:', error.message);
  }
};

/**
 * Limpa uma ou mais cole√ß√µes do banco de dados.
 * Essencial para testes de integra√ß√£o para garantir um estado limpo antes de cada teste.
 * @param {string[]} collectionNames Nomes das cole√ß√µes a serem limpas.
 * @returns {Promise<void>} Uma promessa que resolve quando as cole√ß√µes s√£o limpas.
 */
export const clearCollections = async (collectionNames: string[]): Promise<void> => {
  try {
    for (const name of collectionNames) {
      // Verifica se o modelo existe antes de tentar acess√°-lo
      if (mongoose.models[name]) {
        await mongoose.models[name].deleteMany({});
        console.log(`üßπ Cole√ß√£o '${name}' limpa.`);
      } else {
        // Se o modelo n√£o foi carregado, pode tentar acessar diretamente a cole√ß√£o via connection
        // ou garantir que todos os modelos relevantes sejam importados/registrados antes de chamar clearCollections
        console.warn(`‚ö†Ô∏è Modelo para a cole√ß√£o '${name}' n√£o encontrado. Pulando limpeza.`);
      }
    }
  } catch (error: any) {
    console.error('‚ùå Erro ao limpar cole√ß√µes:', error.message);
  }
};
